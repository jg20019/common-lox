(in-package #:common-lox)

(defmethod evaluate ((expr literal-expr)) 
  (value expr))

(defmethod evaluate ((expr grouping-expr))
  (evaluate (expression  expr)))

(defmethod evaluate ((expr unary-expr))
  (let ((right (evaluate (right expr))))
    (case (token-type (operator expr))
      (:minus (- right))
      (:bang (not right)))))

(defmethod evaluate ((expr binary-expr))
  (let ((left (evaluate (left expr)))
        (right (evaluate (right expr))))
    (case (token-type (operator expr))
      (:minus (- left right))
      (:slash (/ left right))
      (:star  (* left right))
      (:plus (cond ((and (numberp left) (numberp right)) (+ left right))
                   ((and (stringp left) (stringp right)) (concatenate 'string left right))))
      (:greater (> left right))
      (:greater-equal (>= left right))
      (:less (< left right))
      (:less-equal (<= left right))
      (:bang-equal (not (equal left right)))
      (:equal-equal (equal left right)))))
